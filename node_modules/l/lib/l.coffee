_ = require "underscore"
check = require("validator").check
sanitize = require("validator").sanitize

root.jQuery = require "jQuery"
root.window = {}
root.window.SC = {}
root.window.SproutCore = {}
root.YES = yes
root.NO = no
root.sc_require = ->
require "../vendor/sproutcore/runtime"
#require "../vendor/sproutcore/datastore"
require "../vendor/sproutcore/statechart"

StatechartManager = SC.Object.extend SC.StatechartManager,
  autoInitStatechart: yes
  statesAreConcurrent: yes
  
class AbstractStateMachine extends StatechartManager
  @debug: no
  
  @statesAreSet: no
  
  constructor: ->
    if @constructor.statesAreSet is no
    
      if AbstractStateMachine.debug is yes then console.log "No states are set. Set an empty one"
      
      # Prevents SproutCore from complaining
      @constructor.states ->
        @state "Empty"
    
    super arguments...
  
  update: (key, value) ->
    if validator = this["#{key} validator"]
      if value isnt undefined then validator.call
        value: do -> check value
      
    @set arguments...
    
  read: (key) ->
    @get arguments...
  
  @states: (body) ->
    if body then body.call @
    
  @state: (state, options, body) ->
    
    @statesAreSet = yes
    
    {state, name, options, body} = AbstractStateMachine._parseArgs arguments...
    
    AbstractStateMachine._log "Create global state <#{name}> from a class: #{if state isnt null then 'yes' else 'no'}"
    
    AbstractStateMachine._createState @, state, name, options, body
  
  @_parseArgs: (state, options, body) ->
    if state instanceof Object
      name = state::name
    else if typeof state is "string"
      name = state
      state = null
      
    if typeof options is "object"
      _(options).defaults
        concurrent: no
    else if typeof options is "function"
      body = options
      options =
        concurrent: no
    else if not options
      options =
        concurrent: no
        
    {state, name, options, body}
    
  @_createState: (context, CustomState, name, options, body) ->
    NewState = State.design()
    NewState::substatesAreConcurrent = options.concurrent
    
    @_log " - Has concurrent substates: #{if options.concurrent then 'yes' else 'no'}"
    context::[name] = NewState
    
    @_createEventHandlers NewState, CustomState
      
    if body then body.call NewState
    
  @_setInitialSubstateOnParent: (ParentState, name) ->
    
    if ParentState::substatesAreConcurrent isnt yes and not ParentState::initialSubstate
      ParentState::initialSubstate = initialSubstate = name
      
    initialSubstateMessage = if initialSubstate? then "<#{initialSubstate}>" else 'no'
    @_log " - Has initial substate: #{if initialSubstate? then initialSubstateMessage else 'no'}"
    
  @_createEventHandlers: (NewState, CustomState) ->
    if CustomState instanceof Object
      properties = _(CustomState::).keys()
      eventHandlers = (property for property in properties when typeof CustomState::[property] is "function" and property isnt "constructor")
      for eventHandler in eventHandlers
        NewState::[eventHandler] = CustomState::[eventHandler]
        
  @_createTransitionStates: (eventName, FromState, options) ->
    FromState::transitionStates ?= []
    if typeof options.goto is "string"
      toState = options.goto
      FromState::transitionStates.push "#{eventName}.#{toState}"
    else if typeof options.goto is "array"
      do (toState) ->
        for toState in options.goto
          FromState::transitionStates.push "#{eventName}.#{toState}"
    
  @_createGotoHandler: (eventName, FromState) ->
    FromState::goto = (state) ->
      if "#{eventName}.#{state}" in @transitionStates
        @statechart.gotoState state, @name
      else
        throw new Error "You can't goto state <#{state}> through event [#{eventName}] in state <#{@name}>"
        
  @attributes: (body) ->
    attributes = if body then body.call @
    for attribute, config of attributes
      
      value = if config.value is undefined then undefined else config.value
      
      # Save the validator
      if config.validate
        this::["#{attribute} validator"] = validator = config.validate
        
        # Validate the default value
        if value isnt undefined then validator.call
          value: do -> check value
      else
        this::["#{attribute} validator"] = null
        
      # Save the attribute in the class prototype
      @::[attribute] = value
  
  @_log: (message) ->
    if @debug is yes then console.log message
    
  # Aliases
  isIn: @::stateIsEntered
  isCurrentlyIn: @::stateIsCurrentState
  
  emit: (eventName, args...) ->
    @sendEvent eventName, args..., ->
      
module.exports.Link = class Link extends AbstractStateMachine
  

module.exports.Entity = class Entity extends AbstractStateMachine
  

AbstractState = SC.State.extend()

module.exports.State = class State extends AbstractState
  @state: (state, options, body) ->
    {state, name, options, body} = AbstractStateMachine._parseArgs arguments...
    AbstractStateMachine._setInitialSubstateOnParent @, name
    
    AbstractStateMachine._log "Create global state <#{name}> from a class: #{if state isnt null then 'yes' else 'no'}"
    
    AbstractStateMachine._createState @, state, name, options, body
    
  @event: (name, options) ->
    if typeof options is "object"
      if options.goto
        AbstractStateMachine._createTransitionStates name, @, options
        
        AbstractStateMachine._createGotoHandler name, @